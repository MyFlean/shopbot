name: Deploy to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: shopbot
  ECS_SERVICE: shopbot
  ECS_CLUSTER: flean-services-cluster
  ECS_TASK_DEFINITION: shopbot
  CONTAINER_NAME: shopbot

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Test deployment
      run: |
        echo "Waiting for service to stabilize..."
        sleep 30
        
        # Get ALB URL from Terraform outputs if available
        if [ -d "terraform" ]; then
          ALB_URL=$(cd terraform && terraform output -raw alb_url 2>/dev/null || echo "")
        fi
        
        # Fallback: try to get ALB URL from AWS CLI
        if [ -z "$ALB_URL" ]; then
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --region $AWS_REGION \
            --query 'LoadBalancers[?contains(LoadBalancerName, `shopbot`)].DNSName' \
            --output text | head -1)
          if [ -n "$ALB_DNS" ]; then
            ALB_URL="http://$ALB_DNS"
          fi
        fi
        
        # Use the correct ALB URL
        ALB_DNS="flean-services-alb-806741654.ap-south-1.elb.amazonaws.com"
        ALB_URL="http://$ALB_DNS"
        
        echo "Testing application health at: $ALB_URL/rs/health"
        curl -f -s "$ALB_URL/rs/health" || exit 1
        echo "âœ… Application health check passed"